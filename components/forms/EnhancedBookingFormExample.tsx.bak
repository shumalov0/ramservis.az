'use client';

import React, { useState, useEffect } from 'react';
import { Formik, Form } from 'formik';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { User, Calendar, MapPin, CreditCard, CheckCircle2 } from 'lucide-react';

import {
  FormValidationProvider,
  FormInput,
  FormSelect,
  FormCheckbox,
  FormRadioGroup,
  FormPhoneInput,
  FormDateInput,
  FormErrorSummary,
  FormSuccessMessage,
} from './index';

import { createBookingValidationSchema } from '@/lib/validation';
import { BookingFormData } from '@/lib/types';
import { useTranslation } from '@/lib/translations';

interface EnhancedBookingFormExampleProps {
  carId: string;
  currentLang: string;
  onSubmit: (data: BookingFormData) => Promise<void>;
  onCancel: () => void;
}

// Mock data for demonstration
const locations = [
  { value: 'office', label: 'Office pickup', extraCharge: 0 },
  { value: 'airport', label: 'Heydar Aliyev Airport', extraCharge: 25 },
  { value: 'city-center', label: 'City Center', extraCharge: 15 },
  { value: 'hotel', label: 'Hotel/Residence', extraCharge: 20 },
];

const additionalServices = [
  { value: 'driver', label: 'Personal Driver', price: 50 },
  { value: 'child-seat', label: 'Child Seat', price: 10 },
  { value: 'gps', label: 'GPS Navigation', price: 5 },
  { value: 'insurance', label: 'Full Insurance', price: 25 },
];

export const EnhancedBookingFormExample_DISABLED: React.FC<EnhancedBookingFormExampleProps> = ({
  carId,
  currentLang,
  onSubmit,
  onCancel,
}) => {
  const t = useTranslation(currentLang);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitSuccess, setSubmitSuccess] = useState(false);
  const [pricing, setPricing] = useState({
    days: 0,
    basePrice: 0,
    locationCharges: 0,
    serviceCharges: 0,
    total: 0,
    deposit: 200,
  });

  const validationSchema = createBookingValidationSchema(currentLang);

  const initialValues: BookingFormData = {
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    carId,
    pickupDate: '',
    dropoffDate: '',
    pickupLocation: '',
    dropoffLocation: '',
    additionalServices: [],
    paymentMethod: 'cash',
    specialRequests: '',
    totalDays: 0,
    totalPrice: 0,
    deposit: 200,
    serviceCharges: 0,
  };

  const calculatePricing = (values: BookingFormData) => {
    if (!values.pickupDate || !values.dropoffDate) return;

    const pickup = new Date(values.pickupDate);
    const dropoff = new Date(values.dropoffDate);
    const timeDiff = dropoff.getTime() - pickup.getTime();
    const days = Math.ceil(timeDiff / (1000 * 3600 * 24));

    if (days >= 2) {
      const dailyRate = 80; // Mock daily rate
      const basePrice = days * dailyRate;

      // Calculate location charges
      const pickupLocation = locations.find(l => l.value === values.pickupLocation);
      const dropoffLocation = locations.find(l => l.value === values.dropoffLocation);
      const locationCharges = (pickupLocation?.extraCharge || 0) + (dropoffLocation?.extraCharge || 0);

      // Calculate service charges
      const serviceCharges = values.additionalServices.reduce((total, serviceId) => {
        const service = additionalServices.find(s => s.value === serviceId);
        return total + (service ? service.price * days : 0);
      }, 0);

      const total = basePrice + locationCharges + serviceCharges;

      setPricing({
        days,
        basePrice,
        locationCharges,
        serviceCharges,
        total,
        deposit: 200,
      });
    }
  };

  const handleSubmit = async (values: BookingFormData) => {
    setIsSubmitting(true);
    try {
      const submissionData = {
        ...values,
        totalDays: pricing.days,
        totalPrice: pricing.total,
        serviceCharges: pricing.serviceCharges,
      };
      
      await onSubmit(submissionData);
      setSubmitSuccess(true);
      
      // Auto-hide success message after 3 seconds
      setTimeout(() => setSubmitSuccess(false), 3000);
    } catch (error) {
      console.error('Form submission error:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <FormValidationProvider
      schema={validationSchema}
      formId={`booking-${carId}`}
      lang={currentLang}
      persistState={true}
      autoSave={true}
    >
      <div className="max-w-4xl mx-auto p-6 space-y-6">
        {submitSuccess && (
          <FormSuccessMessage
            message="Booking submitted successfully! You will receive a confirmation email shortly."
            onDismiss={() => setSubmitSuccess(false)}
          />
        )}

        <Formik
          initialValues={initialValues}
          validationSchema={validationSchema}
          onSubmit={handleSubmit}
          enableReinitialize
        >
          {({ values, errors, touched, setFieldValue }) => {
            // Calculate pricing when relevant fields change
            useEffect(() => {
              calculatePricing(values);
            }, [values.pickupDate, values.dropoffDate, values.pickupLocation, values.dropoffLocation, values.additionalServices]);

            return (
              <Form className="space-y-6">
                {/* Form Error Summary */}
                <FormErrorSummary
                  errors={errors}
                  touched={touched}
                  showTitle={true}
                  collapsible={true}
                />

                {/* Personal Information */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2">
                      <User className="h-5 w-5" />
                      <span>{t.personalInfo}</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormInput
                      name="firstName"
                      label={t.firstName}
                      placeholder="Enter your first name"
                      required
                    />
                    <FormInput
                      name="lastName"
                      label={t.lastName}
                      placeholder="Enter your last name"
                      required
                    />
                    <FormInput
                      name="email"
                      type="email"
                      label={t.email}
                      placeholder="your.email@example.com"
                      required
                    />
                    <FormPhoneInput
                      name="phone"
                      label={t.phone}
                      placeholder="+994 XX XXX XX XX"
                      required
                    />
                  </CardContent>
                </Card>

                {/* Rental Details */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2">
                      <Calendar className="h-5 w-5" />
                      <span>{t.rentalDetails}</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <FormDateInput
                        name="pickupDate"
                        label={t.pickupDate}
                        required
                      />
                      <FormDateInput
                        name="dropoffDate"
                        label={t.dropoffDate}
                        min={values.pickupDate}
                        required
                      />
                    </div>

                    {pricing.days > 0 && pricing.days < 2 && (
                      <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                        <p className="text-red-700 text-sm">
                          {t.minimumRentalPeriod}: {pricing.days} {t.days}
                        </p>
                      </div>
                    )}

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <FormSelect
                        name="pickupLocation"
                        label={t.pickupLocation}
                        placeholder={t.selectLocation}
                        required
                        options={locations.map(location => ({
                          value: location.value,
                          label: `${location.label}${location.extraCharge > 0 ? ` (+$${location.extraCharge})` : ''}`,
                        }))}
                      />
                      <FormSelect
                        name="dropoffLocation"
                        label={t.dropoffLocation}
                        placeholder={t.selectLocation}
                        required
                        options={locations.map(location => ({
                          value: location.value,
                          label: `${location.label}${location.extraCharge > 0 ? ` (+$${location.extraCharge})` : ''}`,
                        }))}
                      />
                    </div>
                  </CardContent>
                </Card>

                {/* Additional Services */}
                <Card>
                  <CardHeader>
                    <CardTitle>{t.additionalServices}</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {additionalServices.map(service => (
                      <FormCheckbox
                        key={service.value}
                        name="additionalServices"
                        label={service.label}
                        description={`$${service.price}/${t.perDay.replace('/', '')}`}
                      />
                    ))}
                  </CardContent>
                </Card>

                {/* Payment Method */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2">
                      <CreditCard className="h-5 w-5" />
                      <span>{t.paymentMethod}</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <FormRadioGroup
                      name="paymentMethod"
                      options={[
                        {
                          value: 'cash',
                          label: t.cashPayment,
                          description: 'Pay in cash when picking up the car',
                        },
                        {
                          value: 'online',
                          label: t.onlinePayment,
                          description: 'Pay online with credit/debit card',
                        },
                      ]}
                    />
                  </CardContent>
                </Card>

                {/* Price Summary */}
                {pricing.days >= 2 && (
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center space-x-2">
                        <CheckCircle2 className="h-5 w-5" />
                        <span>{t.priceSummary}</span>
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div className="flex justify-between">
                        <span>{t.rentalPeriod}:</span>
                        <span className="font-semibold">{pricing.days} {t.days}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>{t.basePrice}:</span>
                        <span className="font-semibold">${pricing.basePrice}</span>
                      </div>
                      {pricing.locationCharges > 0 && (
                        <div className="flex justify-between">
                          <span>Location charges:</span>
                          <span className="font-semibold">${pricing.locationCharges}</span>
                        </div>
                      )}
                      {pricing.serviceCharges > 0 && (
                        <div className="flex justify-between">
                          <span>{t.additionalServicesPrice}:</span>
                          <span className="font-semibold">${pricing.serviceCharges}</span>
                        </div>
                      )}
                      <Separator />
                      <div className="flex justify-between text-lg">
                        <span className="font-bold">{t.totalAmount}:</span>
                        <span className="font-bold text-amber-600">${pricing.total}</span>
                      </div>
                      <div className="flex justify-between text-red-600">
                        <span className="font-semibold">{t.deposit}:</span>
                        <span className="font-semibold">${pricing.deposit}</span>
                      </div>
                    </CardContent>
                  </Card>
                )}

                {/* Submit Buttons */}
                <div className="flex space-x-4">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={onCancel}
                    className="flex-1"
                    disabled={isSubmitting}
                  >
                    {t.cancel}
                  </Button>
                  <Button
                    type="submit"
                    disabled={isSubmitting || pricing.days < 2}
                    className="flex-1 bg-amber-600 hover:bg-amber-700"
                  >
                    {isSubmitting ? 'Submitting...' : t.makeReservation}
                  </Button>
                </div>
              </Form>
            );
          }}
        </Formik>
      </div>
    </FormValidationProvider>
  );
};